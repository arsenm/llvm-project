; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=s390x-linux-gnu < %s | FileCheck -check-prefixes=LINUX,LINUX-BASE %s
; RUN: llc -mtriple=s390x-linux-gnu -mcpu=z13 < %s | FileCheck -check-prefixes=LINUX,LINUX-Z13 %s

; FIXME: Why do the zos checks not get emitted?
; RUN: llc -mtriple=s390x-ibm-zos < %s | FileCheck -check-prefixes=ZOS,ZOS-BASE %s
; RUN: llc -mtriple=s390x-ibm-zos -mcpu=z13 < %s | FileCheck -check-prefixes=ZOS,ZOS-Z13 %s

declare void @v2i64_arg(<2 x i64>)
declare void @v2i64_v2i64_arg(<2 x i64>, <2 x i64>)
declare void @v2i64_v2i64_v2i64_arg(<2 x i64>, <2 x i64>, <2 x i64>)
declare void @i64_v2i64_arg(i64, <2 x i64>)
declare void @v2i64_i64_arg(<2 x i64>, i64)
declare void @v2i64_v2i64_i64_arg(<2 x i64>, <2 x i64>, i64)
declare void @v2i64_i64_v2i64_arg(<2 x i64>, i64, <2 x i64>)

define void @call_v2i64_arg() {
; LINUX-BASE-LABEL: call_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -176
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 336
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    stg %r1, 168(%r15)
; LINUX-BASE-NEXT:    la %r2, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 160(%r15)
; LINUX-BASE-NEXT:    brasl %r14, v2i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 288(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    brasl %r14, v2i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.v2i64 = load volatile <2 x i64>, ptr null
  call void @v2i64_arg(<2 x i64> %arg0.v2i64)
  ret void
}

define void @call_v2i64_v2i64_arg() {
; LINUX-BASE-LABEL: call_v2i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -192
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 352
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    lg %r2, 0
; LINUX-BASE-NEXT:    lg %r3, 8
; LINUX-BASE-NEXT:    stg %r3, 168(%r15)
; LINUX-BASE-NEXT:    stg %r2, 160(%r15)
; LINUX-BASE-NEXT:    stg %r1, 184(%r15)
; LINUX-BASE-NEXT:    la %r2, 176(%r15)
; LINUX-BASE-NEXT:    la %r3, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 176(%r15)
; LINUX-BASE-NEXT:    brasl %r14, v2i64_v2i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 304(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_v2i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    vl %v26, 0, 3
; LINUX-Z13-NEXT:    brasl %r14, v2i64_v2i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.v2i64 = load volatile <2 x i64>, ptr null
  %arg1.v2i64 = load volatile <2 x i64>, ptr null
  call void @v2i64_v2i64_arg(<2 x i64> %arg0.v2i64, <2 x i64> %arg1.v2i64)
  ret void
}

define void @call_i64_v2i64_arg() {
; LINUX-BASE-LABEL: call_i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -176
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 336
; LINUX-BASE-NEXT:    lg %r2, 0
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    stg %r1, 168(%r15)
; LINUX-BASE-NEXT:    la %r3, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 160(%r15)
; LINUX-BASE-NEXT:    brasl %r14, i64_v2i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 288(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    lg %r2, 0
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    brasl %r14, i64_v2i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.i64 = load volatile i64, ptr null
  %arg1.v2i64 = load volatile <2 x i64>, ptr null
  call void @i64_v2i64_arg(i64 %arg0.i64, <2 x i64> %arg1.v2i64)
  ret void
}

define void @call_v2i64_i64_arg() {
; LINUX-BASE-LABEL: call_v2i64_i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -176
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 336
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    lg %r3, 0
; LINUX-BASE-NEXT:    stg %r1, 168(%r15)
; LINUX-BASE-NEXT:    la %r2, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 160(%r15)
; LINUX-BASE-NEXT:    brasl %r14, v2i64_i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 288(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_v2i64_i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    lg %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, v2i64_i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.v2i64 = load volatile <2 x i64>, ptr null
  %arg1.i64 = load volatile i64, ptr null
  call void @v2i64_i64_arg(<2 x i64> %arg0.v2i64, i64 %arg1.i64)
  ret void
}

define void @call_v2i64_v2i64_v2i64_arg() {
; LINUX-BASE-LABEL: call_v2i64_v2i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -208
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 368
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    lg %r2, 0
; LINUX-BASE-NEXT:    lg %r3, 8
; LINUX-BASE-NEXT:    lg %r4, 0
; LINUX-BASE-NEXT:    lg %r5, 8
; LINUX-BASE-NEXT:    stg %r5, 168(%r15)
; LINUX-BASE-NEXT:    stg %r4, 160(%r15)
; LINUX-BASE-NEXT:    stg %r3, 184(%r15)
; LINUX-BASE-NEXT:    stg %r2, 176(%r15)
; LINUX-BASE-NEXT:    stg %r1, 200(%r15)
; LINUX-BASE-NEXT:    la %r2, 192(%r15)
; LINUX-BASE-NEXT:    la %r3, 176(%r15)
; LINUX-BASE-NEXT:    la %r4, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 192(%r15)
; LINUX-BASE-NEXT:    brasl %r14, v2i64_v2i64_v2i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 320(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_v2i64_v2i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    vl %v26, 0, 3
; LINUX-Z13-NEXT:    vl %v28, 0, 3
; LINUX-Z13-NEXT:    brasl %r14, v2i64_v2i64_v2i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.v2i64 = load volatile <2 x i64>, ptr null
  %arg1.v2i64 = load volatile <2 x i64>, ptr null
  %arg2.v2i64 = load volatile <2 x i64>, ptr null
  call void @v2i64_v2i64_v2i64_arg(<2 x i64> %arg0.v2i64, <2 x i64> %arg1.v2i64, <2 x i64> %arg2.v2i64)
  ret void
}

define void @call_v2i64_v2i64_i64_arg() {
; LINUX-BASE-LABEL: call_v2i64_v2i64_i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -192
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 352
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    lg %r2, 0
; LINUX-BASE-NEXT:    lg %r3, 8
; LINUX-BASE-NEXT:    lg %r4, 0
; LINUX-BASE-NEXT:    stg %r3, 168(%r15)
; LINUX-BASE-NEXT:    stg %r2, 160(%r15)
; LINUX-BASE-NEXT:    stg %r1, 184(%r15)
; LINUX-BASE-NEXT:    la %r2, 176(%r15)
; LINUX-BASE-NEXT:    la %r3, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 176(%r15)
; LINUX-BASE-NEXT:    brasl %r14, v2i64_v2i64_i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 304(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_v2i64_v2i64_i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    vl %v26, 0, 3
; LINUX-Z13-NEXT:    lg %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, v2i64_v2i64_i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.v2i64 = load volatile <2 x i64>, ptr null
  %arg1.v2i64 = load volatile <2 x i64>, ptr null
  %arg2.i64 = load volatile i64, ptr null
  call void @v2i64_v2i64_i64_arg(<2 x i64> %arg0.v2i64, <2 x i64> %arg1.v2i64, i64 %arg2.i64)
  ret void
}

define void @call_v2i64_i64_v2i64_arg() {
; LINUX-BASE-LABEL: call_v2i64_i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -192
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 352
; LINUX-BASE-NEXT:    lg %r0, 0
; LINUX-BASE-NEXT:    lg %r1, 8
; LINUX-BASE-NEXT:    lg %r3, 0
; LINUX-BASE-NEXT:    lg %r2, 0
; LINUX-BASE-NEXT:    lg %r4, 8
; LINUX-BASE-NEXT:    stg %r4, 168(%r15)
; LINUX-BASE-NEXT:    stg %r2, 160(%r15)
; LINUX-BASE-NEXT:    stg %r1, 184(%r15)
; LINUX-BASE-NEXT:    la %r2, 176(%r15)
; LINUX-BASE-NEXT:    la %r4, 160(%r15)
; LINUX-BASE-NEXT:    stg %r0, 176(%r15)
; LINUX-BASE-NEXT:    brasl %r14, v2i64_i64_v2i64_arg@PLT
; LINUX-BASE-NEXT:    lmg %r14, %r15, 304(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_v2i64_i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    vl %v24, 0, 3
; LINUX-Z13-NEXT:    lg %r2, 0
; LINUX-Z13-NEXT:    vl %v26, 0, 3
; LINUX-Z13-NEXT:    brasl %r14, v2i64_i64_v2i64_arg@PLT
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %arg0.v2i64 = load volatile <2 x i64>, ptr null
  %arg1.i64 = load volatile i64, ptr null
  %arg2.v2i64 = load volatile <2 x i64>, ptr null
  call void @v2i64_i64_v2i64_arg(<2 x i64> %arg0.v2i64, i64 %arg1.i64, <2 x i64> %arg2.v2i64)
  ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; LINUX: {{.*}}
; ZOS: {{.*}}
; ZOS-BASE: {{.*}}
; ZOS-Z13: {{.*}}
