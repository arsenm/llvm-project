; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=s390x-linux-gnu < %s | FileCheck -check-prefixes=LINUX,LINUX-BASE %s
; RUN: llc -mtriple=s390x-linux-gnu -mcpu=z13 < %s | FileCheck -check-prefixes=LINUX,LINUX-Z13 %s

; FIXME: Why do the zos checks not get emitted?
; RUN: llc -mtriple=s390x-ibm-zos < %s | FileCheck -check-prefixes=ZOS,ZOS-BASE %s
; RUN: llc -mtriple=s390x-ibm-zos -mcpu=z13 < %s | FileCheck -check-prefixes=ZOS,ZOS-Z13 %s

define void @v2i64_arg(<2 x i64> %arg.v2i64) {
; LINUX-BASE-LABEL: v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 8(%r2)
; LINUX-BASE-NEXT:    lg %r1, 0(%r2)
; LINUX-BASE-NEXT:    stg %r0, 8
; LINUX-BASE-NEXT:    stg %r1, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    br %r14
  store volatile <2 x i64> %arg.v2i64, ptr null
  ret void
}

define void @v2i64_v2i64_arg(<2 x i64> %arg0.v2i64, <2 x i64> %arg1.v2i64) {
; LINUX-BASE-LABEL: v2i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 8(%r2)
; LINUX-BASE-NEXT:    lg %r1, 0(%r2)
; LINUX-BASE-NEXT:    lg %r2, 8(%r3)
; LINUX-BASE-NEXT:    lg %r3, 0(%r3)
; LINUX-BASE-NEXT:    stg %r0, 8
; LINUX-BASE-NEXT:    stg %r1, 0
; LINUX-BASE-NEXT:    stg %r2, 8
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: v2i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    vst %v26, 0, 3
; LINUX-Z13-NEXT:    br %r14
  store volatile <2 x i64> %arg0.v2i64, ptr null
  store volatile <2 x i64> %arg1.v2i64, ptr null
  ret void
}

define void @v2i64_v2i64_v2i64_arg(<2 x i64> %arg0.v2i64, <2 x i64> %arg1.v2i64, <2 x i64> %arg2.v2i64) {
; LINUX-BASE-LABEL: v2i64_v2i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 0(%r4)
; LINUX-BASE-NEXT:    lg %r1, 8(%r4)
; LINUX-BASE-NEXT:    lg %r4, 8(%r2)
; LINUX-BASE-NEXT:    lg %r2, 0(%r2)
; LINUX-BASE-NEXT:    lg %r5, 8(%r3)
; LINUX-BASE-NEXT:    lg %r3, 0(%r3)
; LINUX-BASE-NEXT:    stg %r4, 8
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r5, 8
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r1, 8
; LINUX-BASE-NEXT:    stg %r0, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: v2i64_v2i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    vst %v26, 0, 3
; LINUX-Z13-NEXT:    vst %v28, 0, 3
; LINUX-Z13-NEXT:    br %r14
  store volatile <2 x i64> %arg0.v2i64, ptr null
  store volatile <2 x i64> %arg1.v2i64, ptr null
  store volatile <2 x i64> %arg2.v2i64, ptr null
  ret void
}

define void @i64_v2i64_arg(i64 %arg0.i64, <2 x i64> %arg1.v2i64) {
; LINUX-BASE-LABEL: i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 8(%r3)
; LINUX-BASE-NEXT:    lg %r1, 0(%r3)
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r0, 8
; LINUX-BASE-NEXT:    stg %r1, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    br %r14
  store volatile i64 %arg0.i64, ptr null
  store volatile <2 x i64> %arg1.v2i64, ptr null
  ret void
}

define void @v2i64_i64_arg(<2 x i64> %arg0.v2i64, i64 %arg1.i64) {
; LINUX-BASE-LABEL: v2i64_i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 8(%r2)
; LINUX-BASE-NEXT:    lg %r1, 0(%r2)
; LINUX-BASE-NEXT:    stg %r0, 8
; LINUX-BASE-NEXT:    stg %r1, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: v2i64_i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    br %r14
  store volatile <2 x i64> %arg0.v2i64, ptr null
  store volatile i64 %arg1.i64, ptr null
  ret void
}

define void @v2i64_v2i64_i64_arg(<2 x i64> %arg0.v2i64, <2 x i64> %arg1.v2i64, i64 %arg2.i64) {
; LINUX-BASE-LABEL: v2i64_v2i64_i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 8(%r2)
; LINUX-BASE-NEXT:    lg %r1, 0(%r2)
; LINUX-BASE-NEXT:    lg %r2, 8(%r3)
; LINUX-BASE-NEXT:    lg %r3, 0(%r3)
; LINUX-BASE-NEXT:    stg %r0, 8
; LINUX-BASE-NEXT:    stg %r1, 0
; LINUX-BASE-NEXT:    stg %r2, 8
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r4, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: v2i64_v2i64_i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    vst %v26, 0, 3
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    br %r14
  store volatile <2 x i64> %arg0.v2i64, ptr null
  store volatile <2 x i64> %arg1.v2i64, ptr null
  store volatile i64 %arg2.i64, ptr null
  ret void
}

define void @v2i64_i64_v2i64_arg(<2 x i64> %arg0.v2i64, i64 %arg1.i64, <2 x i64> %arg2.v2i64) {
; LINUX-BASE-LABEL: v2i64_i64_v2i64_arg:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    lg %r0, 8(%r2)
; LINUX-BASE-NEXT:    lg %r1, 0(%r2)
; LINUX-BASE-NEXT:    lg %r2, 0(%r4)
; LINUX-BASE-NEXT:    lg %r4, 8(%r4)
; LINUX-BASE-NEXT:    stg %r0, 8
; LINUX-BASE-NEXT:    stg %r1, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r4, 8
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: v2i64_i64_v2i64_arg:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    vst %v24, 0, 3
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    vst %v26, 0, 3
; LINUX-Z13-NEXT:    br %r14
  store volatile <2 x i64> %arg0.v2i64, ptr null
  store volatile i64 %arg1.i64, ptr null
  store volatile <2 x i64> %arg2.v2i64, ptr null
  ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; LINUX: {{.*}}
; ZOS: {{.*}}
; ZOS-BASE: {{.*}}
; ZOS-Z13: {{.*}}
