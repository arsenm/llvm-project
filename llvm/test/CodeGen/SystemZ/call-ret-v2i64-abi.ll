; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=s390x-linux-gnu < %s | FileCheck -check-prefixes=LINUX,LINUX-BASE %s
; RUN: llc -mtriple=s390x-linux-gnu -mcpu=z13 < %s | FileCheck -check-prefixes=LINUX,LINUX-Z13 %s

; FIXME: Why do the zos checks not get emitted?
; RUN: llc -mtriple=s390x-ibm-zos < %s | FileCheck -check-prefixes=ZOS,ZOS-BASE %s
; RUN: llc -mtriple=s390x-ibm-zos -mcpu=z13 < %s | FileCheck -check-prefixes=ZOS,ZOS-Z13 %s


declare <2 x i64> @ret_v2i64(ptr)
declare { <2 x i64>, <2 x i64> } @ret_v2i64_x2(ptr)
;declare { <2 x i64>, <2 x i64>, <2 x i64> } @ret_v2i64_x3(ptr)
declare { <2 x i64>, i64 } @ret_v2i64_i64(ptr)
declare { i64, <2 x i64> } @ret_i64_v2i64(ptr)
declare { i64, <2 x i64>, i64 } @ret_i64_v2i64_i64(ptr)

;declare <3 x i64> @ret_v3i64(ptr)
;declare <4 x i64> @ret_v4i64(ptr)
;declare { i64, i64, i64, <2 x i64> } @ret_i64_i64_i64_v2i64(ptr)
;declare { i64, i64, i64, i64, <2 x i64> } @ret_i64_i64_i64_i64_v2i64(ptr)

define void @call_ret_v2i64(ptr %ptr) {
; LINUX-BASE-LABEL: call_ret_v2i64:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -160
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 320
; LINUX-BASE-NEXT:    lghi %r2, 0
; LINUX-BASE-NEXT:    brasl %r14, ret_v2i64@PLT
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_ret_v2i64:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    lghi %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, ret_v2i64@PLT
; LINUX-Z13-NEXT:    vsteg %v24, 0, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 1
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %ret = call <2 x i64> @ret_v2i64(ptr null)
  %elt0 = extractelement <2 x i64> %ret, i64 0
  %elt1 = extractelement <2 x i64> %ret, i64 1
  store volatile i64 %elt0, ptr null
  store volatile i64 %elt1, ptr null
  ret void
}

define void @call_ret_v2i64_x2(ptr %ptr) {
; LINUX-BASE-LABEL: call_ret_v2i64_x2:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -160
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 320
; LINUX-BASE-NEXT:    lghi %r2, 0
; LINUX-BASE-NEXT:    brasl %r14, ret_v2i64_x2@PLT
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r4, 0
; LINUX-BASE-NEXT:    stg %r5, 0
; LINUX-BASE-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_ret_v2i64_x2:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    lghi %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, ret_v2i64_x2@PLT
; LINUX-Z13-NEXT:    vsteg %v24, 0, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 1
; LINUX-Z13-NEXT:    vsteg %v26, 0, 0
; LINUX-Z13-NEXT:    vsteg %v26, 0, 1
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %ret = call { <2 x i64>, <2 x i64> } @ret_v2i64_x2(ptr null)

  %ret.0 = extractvalue { <2 x i64>, <2 x i64> } %ret, 0
  %ret.1 = extractvalue { <2 x i64>, <2 x i64> } %ret, 1

  %elt0 = extractelement <2 x i64> %ret.0, i64 0
  %elt1 = extractelement <2 x i64> %ret.0, i64 1
  %elt2 = extractelement <2 x i64> %ret.1, i64 0
  %elt3 = extractelement <2 x i64> %ret.1, i64 1

  store volatile i64 %elt0, ptr null
  store volatile i64 %elt1, ptr null
  store volatile i64 %elt2, ptr null
  store volatile i64 %elt3, ptr null

  ret void
}

define void @call_ret_v2i64_i64(ptr %ptr) {
; LINUX-BASE-LABEL: call_ret_v2i64_i64:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -160
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 320
; LINUX-BASE-NEXT:    lghi %r2, 0
; LINUX-BASE-NEXT:    brasl %r14, ret_v2i64_i64@PLT
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r4, 0
; LINUX-BASE-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_ret_v2i64_i64:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    lghi %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, ret_v2i64_i64@PLT
; LINUX-Z13-NEXT:    vsteg %v24, 0, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 1
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %ret = call { <2 x i64>, i64 } @ret_v2i64_i64(ptr null)
  %ret.0 = extractvalue { <2 x i64>, i64 } %ret, 0

  %elt0 = extractelement <2 x i64> %ret.0, i64 0
  %elt1 = extractelement <2 x i64> %ret.0, i64 1
  %elt2 = extractvalue { <2 x i64>, i64 } %ret, 1

  store volatile i64 %elt0, ptr null
  store volatile i64 %elt1, ptr null
  store volatile i64 %elt2, ptr null

  ret void
}

define void @call_ret_i64_v2i64(ptr %ptr) {
; LINUX-BASE-LABEL: call_ret_i64_v2i64:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -160
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 320
; LINUX-BASE-NEXT:    lghi %r2, 0
; LINUX-BASE-NEXT:    brasl %r14, ret_i64_v2i64@PLT
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r4, 0
; LINUX-BASE-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_ret_i64_v2i64:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    lghi %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, ret_i64_v2i64@PLT
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 1
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %ret = call { i64, <2 x i64> } @ret_i64_v2i64(ptr null)
  %ret.1 = extractvalue { i64, <2 x i64> } %ret, 1
  %elt0 = extractvalue { i64, <2 x i64> } %ret, 0
  %elt1 = extractelement <2 x i64> %ret.1, i64 0
  %elt2 = extractelement <2 x i64> %ret.1, i64 1
  store volatile i64 %elt0, ptr null
  store volatile i64 %elt1, ptr null
  store volatile i64 %elt2, ptr null
  ret void
}

define void @call_ret_i64_v2i64_i64(ptr %ptr) {
; LINUX-BASE-LABEL: call_ret_i64_v2i64_i64:
; LINUX-BASE:       # %bb.0:
; LINUX-BASE-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-BASE-NEXT:    .cfi_offset %r14, -48
; LINUX-BASE-NEXT:    .cfi_offset %r15, -40
; LINUX-BASE-NEXT:    aghi %r15, -160
; LINUX-BASE-NEXT:    .cfi_def_cfa_offset 320
; LINUX-BASE-NEXT:    lghi %r2, 0
; LINUX-BASE-NEXT:    brasl %r14, ret_i64_v2i64_i64@PLT
; LINUX-BASE-NEXT:    stg %r2, 0
; LINUX-BASE-NEXT:    stg %r3, 0
; LINUX-BASE-NEXT:    stg %r4, 0
; LINUX-BASE-NEXT:    stg %r5, 0
; LINUX-BASE-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-BASE-NEXT:    br %r14
;
; LINUX-Z13-LABEL: call_ret_i64_v2i64_i64:
; LINUX-Z13:       # %bb.0:
; LINUX-Z13-NEXT:    stmg %r14, %r15, 112(%r15)
; LINUX-Z13-NEXT:    .cfi_offset %r14, -48
; LINUX-Z13-NEXT:    .cfi_offset %r15, -40
; LINUX-Z13-NEXT:    aghi %r15, -160
; LINUX-Z13-NEXT:    .cfi_def_cfa_offset 320
; LINUX-Z13-NEXT:    lghi %r2, 0
; LINUX-Z13-NEXT:    brasl %r14, ret_i64_v2i64_i64@PLT
; LINUX-Z13-NEXT:    stg %r2, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 0
; LINUX-Z13-NEXT:    vsteg %v24, 0, 1
; LINUX-Z13-NEXT:    stg %r3, 0
; LINUX-Z13-NEXT:    lmg %r14, %r15, 272(%r15)
; LINUX-Z13-NEXT:    br %r14
  %ret = call { i64, <2 x i64>, i64 } @ret_i64_v2i64_i64(ptr null)
  %ret.0 = extractvalue { i64, <2 x i64>, i64 } %ret, 0
  %ret.1 = extractvalue { i64, <2 x i64>, i64 } %ret, 1
  %ret.2 = extractvalue { i64, <2 x i64>, i64 } %ret, 2
  %elt0 = extractelement <2 x i64> %ret.1, i64 0
  %elt1 = extractelement <2 x i64> %ret.1, i64 1
  store volatile i64 %ret.0, ptr null
  store volatile i64 %elt0, ptr null
  store volatile i64 %elt1, ptr null
  store volatile i64 %ret.2, ptr null
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; LINUX: {{.*}}
; ZOS: {{.*}}
; ZOS-BASE: {{.*}}
; ZOS-Z13: {{.*}}
